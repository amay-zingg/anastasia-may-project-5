{"version":3,"sources":["serviceWorker.js","components/Weather/index.js","components/Firebase/index.js","components/Map/index.js","components/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Weather","props","className","src","weatherIcon","alt","description","temp","city","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","MapContainer","handleToggleOpen","setState","isOpen","console","log","handleToggleClose","state","markers","selectedMarker","database","ref","on","snapshot","markersList","data","val","key","push","id","artPiece","google","this","zoom","style","position","width","height","initialCenter","lat","lng","map","marker","icon","url","onClick","Component","GoogleApiWrapper","ReactDOM","render","document","getElementById","App","getWeather","a","fetch","callWeather","json","response","weather","Math","round","parseFloat","main","feels_like","name","get_WeatherIcon","Thunderstorm","Rain","Snow","Clouds","Clouds2","Clear","icons","rangeId","Map","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b45eec30.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\nconst Weather = (props) => {\n\treturn (\n\t\t<div className=\"weather\">\n\t\t\t<h2 className=\"description\">\n\t\t\t\t<img\n\t\t\t\t\tsrc={`${props.weatherIcon}`}\n\t\t\t\t\talt=\"Weather Icons Designer: Andi Nur Abdillah (https://www.iconfinder.com/andinur)\"\n\t\t\t\t/>\n\t\t\t\t<p>{props.description}</p>\n\t\t\t</h2>\n\t\t\t<h2 className=\"temp\">\n\t\t\t\t<p>{props.temp}&deg;</p>\n\t\t\t</h2>\n\t\t\t<h2 className=\"location\">\n\t\t\t\t<p>{props.city}</p>\n\t\t\t</h2>\n\t\t</div>\n\t);\n};\n\nexport default Weather;\n","import firebase from 'firebase/app';\nimport 'firebase/database';\n\nconst firebaseConfig = {\n\tapiKey: 'AIzaSyD71erNI1tRaTKUITG8NPRtH_OHB53MAEQ',\n\tauthDomain: 'kensington-art-tour.firebaseapp.com',\n\tdatabaseURL: 'https://kensington-art-tour.firebaseio.com',\n\tprojectId: 'kensington-art-tour',\n\tstorageBucket: '',\n\tmessagingSenderId: '614348414846'\n};\n\nfirebase.initializeApp(firebaseConfig);\n\n\t\nexport default firebase;\n","import React, { Component } from 'react';\nimport { Map, Marker, InfoWindow, GoogleApiWrapper } from 'google-maps-react';\nimport firebase from '../Firebase/index';\n\nexport class MapContainer extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n      markers: [], \n      selectedMarker: null,\n      isOpen: false,\n    };\n\t}\n\n\tcomponentDidMount() {\n\t\tconst dbRef = firebase.database().ref('markers');\n\t\tdbRef.on('value', (snapshot) => {\n\t\t\tconst markersList = [];\n\t\t\tconst data = snapshot.val();\n\n\t\t\tfor (let key in data) {\n\t\t\t\tmarkersList.push({\n          id: key,\n\t\t\t\t\tartPiece: data[key]\n        });\n      }\n\n\t\t\tthis.setState({\n        markers: markersList\n      });\n\n      console.log(this.state.markers,`this.state.markers`);\n    });\n    \n  }; // * * * * END OF COMPONENT DID MOUNT\n\n  // handleClick = (marker, event) => {\n  //     // console.log(marker, `I was clicked`);\n  //     this.setState({ selectedMarker: marker})\n  //   }\n\n  handleToggleOpen = () => {\n      this.setState({\n          isOpen: true\n      });\n      console.log(\"click town\");\n  }\n\n  handleToggleClose = () => {\n      this.setState({\n          isOpen: false\n      });\n  }\n\n\trender() {\n    const style = {\n      position: 'relative',\n      width: '100%',\n      height: '100%'\n    };\n    \n\t\treturn (\n      <Map  google={this.props.google} \n            zoom={16.5} \n            style={style} \n            initialCenter={{ lat: 43.6545, lng: -79.4015 }}>\n\t\t\t\t\n       {this.state.markers.map((marker) => {\n          return (\n          <Marker\n              key={marker.artPiece.id}\n              icon={{\n                    url: './icons/spraypaint.png'\n                  }}\n              position={{ \n                lat: marker.artPiece.lat, \n                lng: marker.artPiece.lng \n              }}\n              onClick={() => this.handleToggleOpen()} \n          >\n            { this.state.isOpen &&\n              <InfoWindow>\n                <div>\n                  <p>Hello</p>\n                </div>\n              </InfoWindow>}\n        \n          </Marker> \n           ) \n          {/* // END OF MARKER RETURN */}\n        })} \n        {/* // END OF RETURN FOR MAP() */}\n    </Map> \n    ); // END OF ENTIRE RETURN\n  }; // END OF ENTIRE RENDER\n  }; // END OF CLASS COMPONENT\n\nexport default GoogleApiWrapper({\n\tapiKey: 'AIzaSyAP312VeMpu7VGjijjL1XopDWWIL46vl7I'\n})(MapContainer);\n\n          /* {selectedMarker && (\n              <InfoWindow \n              position = {{\n                lat: selectedMarker.artPiece.lat, \n                lng: selectedMarker.artPiece.lng \n              }}\n              onCloseClick ={() => {\n                setSelectedMarker(null);\n              }}\n              > */\n            //     {/* I WANT THIS WINDOW TO OPEN IF THE SELECTED MARKER IS CLICKED */}\n            //     {/* I WANT THIS TO BE CLOSED IF ANOTHER MARKER IS SELECTED */}\n            //     {/* IF ARTISTSOCIAL = \"N/A\" THEN DONT SHOW P.ARTISTSOCIAL */}\n            //     {/* IF ITEM TITLE = \"KENSINGTON BIKE RACK\" SHOW BIKE ICON NOT SPRAY PAINT CAN */}\n            //     {/* <InfoWindow>\n            //           <div className=\"infoWindow\">\n            //           <div className=\"locationImage\">\n            //             <img src=\"./images/KensingtonCarAndWallArt.jpg\" alt=\"Placeholder\"/>\n            //             <p className=\"lastUpdate\">Image Last Updated</p>\n            //           </div>\n            //           <div className=\"locationInfo\">\n            //             <h3>Image Title</h3>\n            //             <p>Location Here</p>\n            //             <p>Artist Name Here</p>\n            //             <p className=\"artistSocial\">\n            //                         <a href=\"#socialLinkHere\">\n            //                         <i className=\"fab fa-instagram\"></i>\n            //                               <span class=\"visuallyhidden\">Instagram (opens a new window)</span>\n            //               <span class=\"handle\">INSTAGRAM ACCOUNT</span>\n            //               </a>\n            //             </p>\n            //           </div>\n            //         </div>\n            //     </InfoWindow> */}\n            //   {/* </InfoWindow>\n            //   )}; */}\n            // {/* </Marker> */}\n         \n\n\n ","import React, { Component, Fragment } from 'react';\nimport '../App.scss';\nimport ReactDOM from 'react-dom';\nimport Favicon from 'react-favicon';\nimport Weather from './Weather/index';\nimport MapContainer from './Map/index';\n// import firebase from './Firebase/index';\n\nReactDOM.render(\n\t<div>\n\t\t<Favicon url=\"favicon.ico\" />\n\t</div>,\n\tdocument.getElementById('root')\n);\n\n// * * * * The api call for the weather\nconst weatherAPI = '1ab6b9b8515ef10ef6711d52af44a94b';\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t};\n\t\tthis.getWeather();\n\t\tthis.weatherIcon = {\n\t\t\tThunderstorm: './icons/thunderstorm.png',\n\t\t\tRain: './icons/rainy.png',\n\t\t\tSnow: './icons/snow.png',\n\t\t\tClouds: './icons/partlyCloudy.png',\n\t\t\tClouds2: './icons/cloudy.png',\n\t\t\tClear: './icons/sunny.png'\n\t\t};\n\t}\n\n\tget_WeatherIcon(icons, rangeId) {\n\t\tswitch (true) {\n\t\t\tcase rangeId >= 200 && rangeId <= 232:\n\t\t\t\tthis.setState({ icon: this.weatherIcon.Thunderstorm });\n\t\t\t\tbreak;\n\t\t\tcase rangeId >= 500 && rangeId <= 531:\n\t\t\t\tthis.setState({ icon: this.weatherIcon.Rain });\n\t\t\t\tbreak;\n\t\t\tcase rangeId >= 600 && rangeId <= 622:\n\t\t\t\tthis.setState({ icon: this.weatherIcon.Snow });\n\t\t\t\tbreak;\n\t\t\tcase rangeId === 800:\n\t\t\t\tthis.setState({ icon: this.weatherIcon.Clear });\n\t\t\t\tbreak;\n\t\t\tcase rangeId >= 801 && rangeId <= 802:\n\t\t\t\tthis.setState({ icon: this.weatherIcon.Clouds });\n\t\t\t\tbreak;\n\t\t\tcase rangeId >= 803 && rangeId <= 804:\n\t\t\t\tthis.setState({ icon: this.weatherIcon.Clouds2 });\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthis.setState({ icon: this.weatherIcon.Clouds });\n\t\t}\n\t}\n\n\tgetWeather = async () => {\n\t\tconst callWeather = await fetch(\n\t\t\t`https://api.openweathermap.org/data/2.5/weather?q=Toronto&units=metric&appid=${weatherAPI}`\n\t\t);\n\n\t\tconst response = await callWeather.json();\n\n\t\tthis.setState({\n\t\t\tdescription: response.weather[0].description,\n\t\t\ttemp: Math.round(parseFloat(response.main.feels_like)),\n\t\t\tcity: response.name\n\t\t});\n\n\t\tthis.get_WeatherIcon(this.weatherIcon, response.weather[0].id);\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<Fragment>\n\t\t\t\t<header className=\"appHeader\">\n\t\t\t\t\t<h1>Kensington Art Tour</h1>\n\t\t\t\t\t<Weather\n\t\t\t\t\t\tweatherIcon={this.state.icon}\n\t\t\t\t\t\tdescription={this.state.description}\n\t\t\t\t\t\ttemp={this.state.temp}\n\t\t\t\t\t\tcity={this.state.city}\n\t\t\t\t\t/>\n\t\t\t\t</header>\n\n\t\t\t\t<main className=\"mainContent\">\n\t\t\t\t\t<div className=\"map\">\n\t\t\t\t\t\t<MapContainer />\n\t\t\t\t\t</div>\n\t\t\t\t</main>\n\n\t\t\t\t<footer className=\"appFooter\">\n\t\t\t\t\t<p>\n\t\t\t\t\t\t<i className=\"far fa-copyright\">\n\t\t\t\t\t\t\t<span className=\"visuallyhidden\">Copyright Symbol</span>\n\t\t\t\t\t\t</i>{' '}\n\t\t\t\t\t\t2020 Anastasia May <i className=\"fab fa-canadian-maple-leaf\" />\n\t\t\t\t\t\t<span className=\"visuallyhidden\">Maple Leaf Icon</span> Explore Toronto\n\t\t\t\t\t</p>\n\t\t\t\t</footer>\n\t\t\t</Fragment>\n\t\t);\n\t}\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport * as serviceWorker from './serviceWorker';\n\n// * * * * CHANGED LOCATION OF APP\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}